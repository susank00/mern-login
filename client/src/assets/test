import { useEffect, useState } from "react";
import axios from "axios";
import { useSelector } from "react-redux";

const Adminproductupdate = () => {
  const selectedProductId = useSelector(
    (state) => state.reducer.selectedProductId
  );
  const [product, setProduct] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    category: "",
    price: "",
    description: "",
    file: null,
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchProduct = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get(
          `http://localhost:3001/api/products/${selectedProductId}`
        );
        setProduct(response.data);
        setFormData({
          name: response.data.name,
          category: response.data.category,
          price: response.data.price,
          description: response.data.description,
        });
      } catch (error) {
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };
    if (selectedProductId) {
      fetchProduct();
    }
  }, [selectedProductId]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFileChange = (e) => {
    setFormData({ ...formData, file: e.target.files[0] });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const formDataToSend = new FormData();
      formDataToSend.append("name", formData.name);
      formDataToSend.append("category", formData.category);
      formDataToSend.append("price", formData.price);
      formDataToSend.append("description", formData.description);
      if (formData.file) {
        formDataToSend.append("file", formData.file);
      }

      const response = await axios.put(
        `http://localhost:3001/api/products/${selectedProductId}`,
        formDataToSend
      );
      setProduct(response.data);

      // Optionally, you can show a success message or navigate to another page
    } catch (error) {
      setError(error.message);
    }
  };

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  if (!product) {
    return <p>No product found with the selected ID</p>;
  }

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        name="name"
        value={formData.name}
        onChange={handleChange}
        placeholder="Product Name"
      />
      <input
        type="text"
        name="category"
        value={formData.category}
        onChange={handleChange}
        placeholder="Product Category"
      />
      <input
        type="number"
        name="price"
        value={formData.price}
        onChange={handleChange}
        placeholder="Price"
      />
      <textarea
        name="description"
        value={formData.description}
        onChange={handleChange}
        placeholder="Product Description"
      />
      <input
        type="file"
        name="file"
        onChange={handleFileChange}
        accept=".jpeg, .png ,.jpg"
      />
      <button type="submit">Update Product</button>
    </form>
  );
};

export default Adminproductupdate;
