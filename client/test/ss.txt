${import.meta.env.VITE_API_URL_PROD_API_URL}



${import.meta.env.VITE_API_URL_CLIENT_PROD_API_URL}

https://pet-store-eight.vercel.app

http://localhost:5173


// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyBg-fmYQ5jmlcHgxi4ZPpW9_egZGzXt0qE",
  authDomain: "petstore-1e64d.firebaseapp.com",
  projectId: "petstore-1e64d",
  storageBucket: "petstore-1e64d.appspot.com",
  messagingSenderId: "861336376598",
  appId: "1:861336376598:web:68e2a53d6026a39650ec37",
  measurementId: "G-D73B4PFL4H"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);


// AddProductForm.js






import { useState } from "react";
import axios from "axios";
import {
  ref,
  deleteObject,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage";
import { storage } from "../../firebaseConfig";

const AddProductForm = () => {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [price, setPrice] = useState("");
  const [file, setFile] = useState("");
  const [category, setCategory] = useState("");
  const [quantity, setQuantity] = useState("");
  const [showForm, setShowForm] = useState(true);
  const getFileExtension = (filename) => {
    return filename.split(".").pop();
  };
  const handleClose = () => {
    setName("");
    setCategory("");
    setPrice("");
    setDescription("");
    setFile(null);
    setQuantity("");
    setShowForm(false);
  };

  const handleSubmit = (e) => {
    e.preventDefault(); // Prevent the default form submission behavior

    const formData = new FormData();
    formData.append("file", file);
    formData.append("name", name);
    formData.append("description", description);
    formData.append("price", price);
    formData.append("category", category);
    formData.append("quantity", quantity);
    let newImageUploaded = false;

    // Upload to Firebase and delete the old image if needed
    if (file) {
      const timestamp = Date.now();
      const fileExtension = getFileExtension(file.name);
      const newFileName = `file_${timestamp}.${fileExtension}`;

      try {
        // Upload the new image
        const imageRef = ref(storage, `productimages/${newFileName}`);
        await uploadBytes(imageRef, file);
        const downloadURL = await getDownloadURL(imageRef);
        console.log("Uploaded Image URL: ", downloadURL);

        // Append the generated file name for backend
        formData.append("image", newFileName);
        newImageUploaded = true; // Mark that the new image was uploaded
      } catch (error) {
        console.error("Error uploading the image:", error);
        alert("Failed to upload image.");
        setIsLoading(false);
        return; // Stop execution on error
      }
    }
    axios
      .post(
        `${import.meta.env.VITE_API_URL_PROD_API_URL}/api/products`,
        formData
      )
      .then((res) => {
        console.log("Product added:", res.data.product);
        // console.log(setImage(res.data[0].image));
        // Clear form fields after successful submission
        setName("");
        setDescription("");
        setPrice("");
        setFile(null); // Clear the file state
        setCategory("");
        setQuantity("");
        alert("product added successfully");
      })
      .catch((err) => console.error("Error adding product:", err));
  };
  return (
    <>
      <div className="flex justify-center  ">
        {showForm && (
          <form
            className="absolute w-6/12  rounded-lg p-4 mt-8 bg-gray-800 z-10"
            onSubmit={handleSubmit}
          >
            <button
              onClick={(e) => {
                e.preventDefault();
                handleClose();
                window.location.reload();
              }}
              className="absolute top-1 right-1 text-white bg-red-600 p-1 rounded-full"
            >
              X
            </button>
            <h2 className="flex justify-center text-gray-200 p-1 text-2xl">
              Add product
            </h2>
            <div className="grid grid-cols-2  gap-2">
              <div className="mb-3 ">
                <label className="block  text-sm font-medium text-gray-900 dark:text-gray-200">
                  Product Name
                </label>

                <input
                  className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  type="text"
                  placeholder="Name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
              </div>
              <div className="mb-3 ">
                <label className="block  text-sm font-medium text-gray-900 dark:text-gray-200">
                  Product category
                </label>

                <input
                  className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  type="text"
                  placeholder="category"
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                />
              </div>
            </div>
            <label className="block  text-sm font-medium text-gray-900 dark:text-gray-200">
              Price
            </label>
            <input
              className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              type="number"
              placeholder="Price"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
            />
            <label className="block  text-sm font-medium text-gray-900 dark:text-gray-200">
              Quantity
            </label>
            <input
              className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              type="number"
              placeholder="Quantity"
              value={quantity}
              onChange={(e) => setQuantity(e.target.value)}
            />
            <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
              Product Description
            </label>
            <textarea
              id="message"
              rows="4"
              className="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Write your thoughts here..."
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            ></textarea>
            <label className="block  text-sm font-medium text-gray-900 dark:text-gray-200">
              Upload photo
            </label>
            <input
              className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              type="file"
              placeholder="Files"
              onChange={(e) => setFile(e.target.files[0])}
              accept=".jpeg, .png ,.jpg "
            />
            <button
              onClick={handleSubmit}
              className="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 mt-2 ml-16"
            >
              Add Product
            </button>
          </form>
        )}
      </div>
    </>
  );
};

export default AddProductForm;
